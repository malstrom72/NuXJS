#! /usr/local/bin/PikaCmd

include('stdlib.pika');
run('./initPPEG.pika');

vargs(@exe,, @inputFile, @es5File, @outputFile);
if (!exists(@outputFile)) {
outputFile = es5File;
es5File = '../src/stdlibES5.js';
};
defaults(@inputFile, '../src/stdlib.js', @es5File, '../src/stdlibES5.js', @outputFile, '../src/stdlibJS.cpp');

print(bake('Loading {inputFile} and {es5File}'));
base = load(inputFile);
overlay = load(es5File);

// Inject ES5 overlay inside stdlib.js' IIFE before the final `})` so helper
// functions remain in scope.
if (base{length(base) - 4:4} != "\t})\n") throw("Unexpected stdlib.js footer");
src = base{0:length(base) - 4} # overlay # "\t})\n";

print('Compiling parser');

ok = ppeg.compileFunction(load('./stdlibMinifier.ppeg'), @minifier);
if (!ok) throw("Error compiling the stdlib parser peg");

print('Shrinking code');

ok = minifier(src, @minified, @i);
if (!ok) throw("Failed parsing at offset " # i);

print(bake('Code shrunk from {length(src)} to {length(minified)}'));

code = '';
for (offset = 0; offset < length(minified); offset += n) {
	for (n = min(length(minified) - offset, 118)
			; { line = '"' # (escape("\n" # minified{offset:n}){3:}); length(line) > 120 }
			; --n);
	code #= line # LF;
};

save(outputFile, bake(
'namespace NuXJS {
const char* STDLIB_JS =
--{code}--;
}
', '--{', '}--'));

print(bake('Updated {outputFile}'));
