Keypoints
######### 

*) one small .cpp and two .h files to include

*) small but efficient stack machine (should perform well compared to other interpreting JS engines)

*) quick single pass compiler (handwritten using recursive descent / operator precedence parsing)

*) fully EcmaScript 3 compliant (with some partial EcmaScript 5 support where it makes most sense)

*) written in standard architecture-agnostic vanilla C++03 (no platform specific tricks!)

*) mark and sweep (stop-the-world) GC, but heap is the standard C++ heap, allocations are done with new etc

*) fully asynchronous and sandboxed VM, you run as much or as little code you want at a time

*) instantiate as many or as few engines in as many or as few threads that you wish

*) zero tolerance for bugs (plenty of tests)

*) did I say sandboxed?!

Design principles
#################

*) `const String&` arguments never saves pointer to the argument, temporary (unmanaged) instances of String("...") are allowed.

*) 	getXXX() implies that there will be an assertion failure if the value is not of type XXX
	asXXX() implies that 0 will be returned if the value is not of type XXX
	toXXX() implies that the value will be converted to type XXX if necessary and an exception might be thrown if it is not possible
